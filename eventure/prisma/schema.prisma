generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum EventSource {
  INTERNAL
  EVENTBRITE
}

enum PlaceType {
  HOTEL
  RESTAURANT
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  profile       Profile?
  checkIns      CheckIn[]
  participants  ConversationParticipant[]
  messages      Message[]     @relation("UserMessages")
}

model Profile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  bio            String?  @db.Text
  interests      String[]
  lastLatitude   Float?
  lastLongitude  Float?
  lastSeenAt     DateTime?
  isPublic       Boolean   @default(true)
}

model Event {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  category      String
  startTime     DateTime
  endTime       DateTime?
  latitude      Float
  longitude     Float
  address       String?
  url           String?
  source        EventSource  @default(INTERNAL)
  externalId    String?
  createdById   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  checkIns      CheckIn[]
}

model CheckIn {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  event           Event?      @relation(fields: [eventId], references: [id])
  eventId         String?
  placeExternalId String?
  placeName       String?
  placeType       PlaceType?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime    @default(now())

  @@index([userId])
  @@index([eventId])
}

model Conversation {
  id            String                        @id @default(cuid())
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User          @relation("UserMessages", fields: [senderId], references: [id])
  senderId       String
  content        String
  createdAt      DateTime      @default(now())

  @@index([conversationId])
}